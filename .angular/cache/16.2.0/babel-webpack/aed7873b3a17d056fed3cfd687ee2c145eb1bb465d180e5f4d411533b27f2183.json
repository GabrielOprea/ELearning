{"ast":null,"code":"import { Component, ChangeDetectionStrategy, ViewEncapsulation, NgZone, Inject, PLATFORM_ID, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, BehaviorSubject, of, combineLatest, pipe, Observable, fromEventPattern, merge } from 'rxjs';\nimport { take, startWith, combineLatest as combineLatest$1, skipWhile, map, scan, distinctUntilChanged, tap, mergeMap, takeUntil, publish, switchMap, withLatestFrom, filter } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_PLAYER_WIDTH = 640;\nconst DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nclass YouTubePlayer {\n  constructor(_ngZone, platformId) {\n    this._ngZone = _ngZone;\n    this._youtubeContainer = new Subject();\n    this._destroyed = new Subject();\n    this._playerChanges = new BehaviorSubject(undefined);\n    this._videoId = new BehaviorSubject(undefined);\n    this._height = new BehaviorSubject(DEFAULT_PLAYER_HEIGHT);\n    this._width = new BehaviorSubject(DEFAULT_PLAYER_WIDTH);\n    this._startSeconds = new BehaviorSubject(undefined);\n    this._endSeconds = new BehaviorSubject(undefined);\n    this._suggestedQuality = new BehaviorSubject(undefined);\n    this._playerVars = new BehaviorSubject(undefined);\n    /** Outputs are direct proxies from the player itself. */\n    this.ready = this._getLazyEmitter('onReady');\n    this.stateChange = this._getLazyEmitter('onStateChange');\n    this.error = this._getLazyEmitter('onError');\n    this.apiChange = this._getLazyEmitter('onApiChange');\n    this.playbackQualityChange = this._getLazyEmitter('onPlaybackQualityChange');\n    this.playbackRateChange = this._getLazyEmitter('onPlaybackRateChange');\n    this._isBrowser = isPlatformBrowser(platformId);\n  }\n  /** YouTube Video ID to view */\n  get videoId() {\n    return this._videoId.value;\n  }\n  set videoId(videoId) {\n    this._videoId.next(videoId);\n  }\n  /** Height of video player */\n  get height() {\n    return this._height.value;\n  }\n  set height(height) {\n    this._height.next(height || DEFAULT_PLAYER_HEIGHT);\n  }\n  /** Width of video player */\n  get width() {\n    return this._width.value;\n  }\n  set width(width) {\n    this._width.next(width || DEFAULT_PLAYER_WIDTH);\n  }\n  /** The moment when the player is supposed to start playing */\n  set startSeconds(startSeconds) {\n    this._startSeconds.next(startSeconds);\n  }\n  /** The moment when the player is supposed to stop playing */\n  set endSeconds(endSeconds) {\n    this._endSeconds.next(endSeconds);\n  }\n  /** The suggested quality of the player */\n  set suggestedQuality(suggestedQuality) {\n    this._suggestedQuality.next(suggestedQuality);\n  }\n  /**\n   * Extra parameters used to configure the player. See:\n   * https://developers.google.com/youtube/player_parameters.html?playerVersion=HTML5#Parameters\n   */\n  get playerVars() {\n    return this._playerVars.value;\n  }\n  set playerVars(playerVars) {\n    this._playerVars.next(playerVars);\n  }\n  ngOnInit() {\n    // Don't do anything if we're not in a browser environment.\n    if (!this._isBrowser) {\n      return;\n    }\n    let iframeApiAvailableObs = of(true);\n    if (!window.YT || !window.YT.Player) {\n      if (this.showBeforeIframeApiLoads && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new Error('Namespace YT not found, cannot construct embedded youtube player. ' + 'Please install the YouTube Player API Reference for iframe Embeds: ' + 'https://developers.google.com/youtube/iframe_api_reference');\n      }\n      const iframeApiAvailableSubject = new Subject();\n      this._existingApiReadyCallback = window.onYouTubeIframeAPIReady;\n      window.onYouTubeIframeAPIReady = () => {\n        if (this._existingApiReadyCallback) {\n          this._existingApiReadyCallback();\n        }\n        this._ngZone.run(() => iframeApiAvailableSubject.next(true));\n      };\n      iframeApiAvailableObs = iframeApiAvailableSubject.pipe(take(1), startWith(false));\n    }\n    // An observable of the currently loaded player.\n    const playerObs = createPlayerObservable(this._youtubeContainer, this._videoId, iframeApiAvailableObs, this._width, this._height, this._playerVars, this._ngZone).pipe(tap(player => {\n      // Emit this before the `waitUntilReady` call so that we can bind to\n      // events that happen as the player is being initialized (e.g. `onReady`).\n      this._playerChanges.next(player);\n    }), waitUntilReady(player => {\n      // Destroy the player if loading was aborted so that we don't end up leaking memory.\n      if (!playerIsReady(player)) {\n        player.destroy();\n      }\n    }), takeUntil(this._destroyed), publish());\n    // Set up side effects to bind inputs to the player.\n    playerObs.subscribe(player => {\n      this._player = player;\n      if (player && this._pendingPlayerState) {\n        this._initializePlayer(player, this._pendingPlayerState);\n      }\n      this._pendingPlayerState = undefined;\n    });\n    bindSizeToPlayer(playerObs, this._width, this._height);\n    bindSuggestedQualityToPlayer(playerObs, this._suggestedQuality);\n    bindCueVideoCall(playerObs, this._videoId, this._startSeconds, this._endSeconds, this._suggestedQuality, this._destroyed);\n    // After all of the subscriptions are set up, connect the observable.\n    playerObs.connect();\n  }\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 11.0.0\n   */\n  createEventsBoundInZone() {\n    return {};\n  }\n  ngAfterViewInit() {\n    this._youtubeContainer.next(this.youtubeContainer.nativeElement);\n  }\n  ngOnDestroy() {\n    if (this._player) {\n      this._player.destroy();\n      window.onYouTubeIframeAPIReady = this._existingApiReadyCallback;\n    }\n    this._playerChanges.complete();\n    this._videoId.complete();\n    this._height.complete();\n    this._width.complete();\n    this._startSeconds.complete();\n    this._endSeconds.complete();\n    this._suggestedQuality.complete();\n    this._youtubeContainer.complete();\n    this._playerVars.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#playVideo */\n  playVideo() {\n    if (this._player) {\n      this._player.playVideo();\n    } else {\n      this._getPendingState().playbackState = YT.PlayerState.PLAYING;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#pauseVideo */\n  pauseVideo() {\n    if (this._player) {\n      this._player.pauseVideo();\n    } else {\n      this._getPendingState().playbackState = YT.PlayerState.PAUSED;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#stopVideo */\n  stopVideo() {\n    if (this._player) {\n      this._player.stopVideo();\n    } else {\n      // It seems like YouTube sets the player to CUED when it's stopped.\n      this._getPendingState().playbackState = YT.PlayerState.CUED;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#seekTo */\n  seekTo(seconds, allowSeekAhead) {\n    if (this._player) {\n      this._player.seekTo(seconds, allowSeekAhead);\n    } else {\n      this._getPendingState().seek = {\n        seconds,\n        allowSeekAhead\n      };\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#mute */\n  mute() {\n    if (this._player) {\n      this._player.mute();\n    } else {\n      this._getPendingState().muted = true;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#unMute */\n  unMute() {\n    if (this._player) {\n      this._player.unMute();\n    } else {\n      this._getPendingState().muted = false;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#isMuted */\n  isMuted() {\n    if (this._player) {\n      return this._player.isMuted();\n    }\n    if (this._pendingPlayerState) {\n      return !!this._pendingPlayerState.muted;\n    }\n    return false;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#setVolume */\n  setVolume(volume) {\n    if (this._player) {\n      this._player.setVolume(volume);\n    } else {\n      this._getPendingState().volume = volume;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getVolume */\n  getVolume() {\n    if (this._player) {\n      return this._player.getVolume();\n    }\n    if (this._pendingPlayerState && this._pendingPlayerState.volume != null) {\n      return this._pendingPlayerState.volume;\n    }\n    return 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate */\n  setPlaybackRate(playbackRate) {\n    if (this._player) {\n      return this._player.setPlaybackRate(playbackRate);\n    } else {\n      this._getPendingState().playbackRate = playbackRate;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate */\n  getPlaybackRate() {\n    if (this._player) {\n      return this._player.getPlaybackRate();\n    }\n    if (this._pendingPlayerState && this._pendingPlayerState.playbackRate != null) {\n      return this._pendingPlayerState.playbackRate;\n    }\n    return 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates */\n  getAvailablePlaybackRates() {\n    return this._player ? this._player.getAvailablePlaybackRates() : [];\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction */\n  getVideoLoadedFraction() {\n    return this._player ? this._player.getVideoLoadedFraction() : 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getPlayerState */\n  getPlayerState() {\n    if (!this._isBrowser || !window.YT) {\n      return undefined;\n    }\n    if (this._player) {\n      return this._player.getPlayerState();\n    }\n    if (this._pendingPlayerState && this._pendingPlayerState.playbackState != null) {\n      return this._pendingPlayerState.playbackState;\n    }\n    return YT.PlayerState.UNSTARTED;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime */\n  getCurrentTime() {\n    if (this._player) {\n      return this._player.getCurrentTime();\n    }\n    if (this._pendingPlayerState && this._pendingPlayerState.seek) {\n      return this._pendingPlayerState.seek.seconds;\n    }\n    return 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality */\n  getPlaybackQuality() {\n    return this._player ? this._player.getPlaybackQuality() : 'default';\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels */\n  getAvailableQualityLevels() {\n    return this._player ? this._player.getAvailableQualityLevels() : [];\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getDuration */\n  getDuration() {\n    return this._player ? this._player.getDuration() : 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl */\n  getVideoUrl() {\n    return this._player ? this._player.getVideoUrl() : '';\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode */\n  getVideoEmbedCode() {\n    return this._player ? this._player.getVideoEmbedCode() : '';\n  }\n  /** Gets an object that should be used to store the temporary API state. */\n  _getPendingState() {\n    if (!this._pendingPlayerState) {\n      this._pendingPlayerState = {};\n    }\n    return this._pendingPlayerState;\n  }\n  /** Initializes a player from a temporary state. */\n  _initializePlayer(player, state) {\n    const {\n      playbackState,\n      playbackRate,\n      volume,\n      muted,\n      seek\n    } = state;\n    switch (playbackState) {\n      case YT.PlayerState.PLAYING:\n        player.playVideo();\n        break;\n      case YT.PlayerState.PAUSED:\n        player.pauseVideo();\n        break;\n      case YT.PlayerState.CUED:\n        player.stopVideo();\n        break;\n    }\n    if (playbackRate != null) {\n      player.setPlaybackRate(playbackRate);\n    }\n    if (volume != null) {\n      player.setVolume(volume);\n    }\n    if (muted != null) {\n      muted ? player.mute() : player.unMute();\n    }\n    if (seek != null) {\n      player.seekTo(seek.seconds, seek.allowSeekAhead);\n    }\n  }\n  /** Gets an observable that adds an event listener to the player when a user subscribes to it. */\n  _getLazyEmitter(name) {\n    // Start with the stream of players. This way the events will be transferred\n    // over to the new player if it gets swapped out under-the-hood.\n    return this._playerChanges.pipe(\n    // Switch to the bound event. `switchMap` ensures that the old event is removed when the\n    // player is changed. If there's no player, return an observable that never emits.\n    switchMap(player => {\n      return player ? fromEventPattern(listener => {\n        player.addEventListener(name, listener);\n      }, listener => {\n        // The API seems to throw when we try to unbind from a destroyed player and it doesn't\n        // expose whether the player has been destroyed so we have to wrap it in a try/catch to\n        // prevent the entire stream from erroring out.\n        try {\n          if (player.removeEventListener) {\n            player.removeEventListener(name, listener);\n          }\n        } catch (_a) {}\n      }) : of();\n    }),\n    // By default we run all the API interactions outside the zone\n    // so we have to bring the events back in manually when they emit.\n    source => new Observable(observer => source.subscribe({\n      next: value => this._ngZone.run(() => observer.next(value)),\n      error: error => observer.error(error),\n      complete: () => observer.complete()\n    })),\n    // Ensures that everything is cleared out on destroy.\n    takeUntil(this._destroyed));\n  }\n}\nYouTubePlayer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'youtube-player',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    // This div is *replaced* by the YouTube player embed.\n    template: '<div #youtubeContainer></div>'\n  }]\n}];\nYouTubePlayer.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}];\nYouTubePlayer.propDecorators = {\n  videoId: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  startSeconds: [{\n    type: Input\n  }],\n  endSeconds: [{\n    type: Input\n  }],\n  suggestedQuality: [{\n    type: Input\n  }],\n  playerVars: [{\n    type: Input\n  }],\n  showBeforeIframeApiLoads: [{\n    type: Input\n  }],\n  ready: [{\n    type: Output\n  }],\n  stateChange: [{\n    type: Output\n  }],\n  error: [{\n    type: Output\n  }],\n  apiChange: [{\n    type: Output\n  }],\n  playbackQualityChange: [{\n    type: Output\n  }],\n  playbackRateChange: [{\n    type: Output\n  }],\n  youtubeContainer: [{\n    type: ViewChild,\n    args: ['youtubeContainer']\n  }]\n};\n/** Listens to changes to the given width and height and sets it on the player. */\nfunction bindSizeToPlayer(playerObs, widthObs, heightObs) {\n  return combineLatest([playerObs, widthObs, heightObs]).subscribe(([player, width, height]) => player && player.setSize(width, height));\n}\n/** Listens to changes from the suggested quality and sets it on the given player. */\nfunction bindSuggestedQualityToPlayer(playerObs, suggestedQualityObs) {\n  return combineLatest([playerObs, suggestedQualityObs]).subscribe(([player, suggestedQuality]) => player && suggestedQuality && player.setPlaybackQuality(suggestedQuality));\n}\n/**\n * Returns an observable that emits the loaded player once it's ready. Certain properties/methods\n * won't be available until the iframe finishes loading.\n * @param onAbort Callback function that will be invoked if the player loading was aborted before\n * it was able to complete. Can be used to clean up any loose references.\n */\nfunction waitUntilReady(onAbort) {\n  return mergeMap(player => {\n    if (!player) {\n      return of(undefined);\n    }\n    if (playerIsReady(player)) {\n      return of(player);\n    }\n    // Since removeEventListener is not on Player when it's initialized, we can't use fromEvent.\n    // The player is not initialized fully until the ready is called.\n    return new Observable(emitter => {\n      let aborted = false;\n      let resolved = false;\n      const onReady = event => {\n        resolved = true;\n        if (!aborted) {\n          event.target.removeEventListener('onReady', onReady);\n          emitter.next(event.target);\n        }\n      };\n      player.addEventListener('onReady', onReady);\n      return () => {\n        aborted = true;\n        if (!resolved) {\n          onAbort(player);\n        }\n      };\n    }).pipe(take(1), startWith(undefined));\n  });\n}\n/** Create an observable for the player based on the given options. */\nfunction createPlayerObservable(youtubeContainer, videoIdObs, iframeApiAvailableObs, widthObs, heightObs, playerVarsObs, ngZone) {\n  const playerOptions = combineLatest([videoIdObs, playerVarsObs]).pipe(withLatestFrom(combineLatest([widthObs, heightObs])), map(([constructorOptions, sizeOptions]) => {\n    const [videoId, playerVars] = constructorOptions;\n    const [width, height] = sizeOptions;\n    return videoId ? {\n      videoId,\n      playerVars,\n      width,\n      height\n    } : undefined;\n  }));\n  return combineLatest([youtubeContainer, playerOptions, of(ngZone)]).pipe(skipUntilRememberLatest(iframeApiAvailableObs), scan(syncPlayerState, undefined), distinctUntilChanged());\n}\n/** Skips the given observable until the other observable emits true, then emit the latest. */\nfunction skipUntilRememberLatest(notifier) {\n  return pipe(combineLatest$1(notifier), skipWhile(([_, doneSkipping]) => !doneSkipping), map(([value]) => value));\n}\n/** Destroy the player if there are no options, or create the player if there are options. */\nfunction syncPlayerState(player, [container, videoOptions, ngZone]) {\n  if (player && videoOptions && player.playerVars !== videoOptions.playerVars) {\n    // The player needs to be recreated if the playerVars are different.\n    player.destroy();\n  } else if (!videoOptions) {\n    if (player) {\n      // Destroy the player if the videoId was removed.\n      player.destroy();\n    }\n    return;\n  } else if (player) {\n    return player;\n  }\n  // Important! We need to create the Player object outside of the `NgZone`, because it kicks\n  // off a 250ms setInterval which will continually trigger change detection if we don't.\n  const newPlayer = ngZone.runOutsideAngular(() => new YT.Player(container, videoOptions));\n  newPlayer.videoId = videoOptions.videoId;\n  newPlayer.playerVars = videoOptions.playerVars;\n  return newPlayer;\n}\n/**\n * Call cueVideoById if the videoId changes, or when start or end seconds change. cueVideoById will\n * change the loaded video id to the given videoId, and set the start and end times to the given\n * start/end seconds.\n */\nfunction bindCueVideoCall(playerObs, videoIdObs, startSecondsObs, endSecondsObs, suggestedQualityObs, destroyed) {\n  const cueOptionsObs = combineLatest([startSecondsObs, endSecondsObs]).pipe(map(([startSeconds, endSeconds]) => ({\n    startSeconds,\n    endSeconds\n  })));\n  // Only respond to changes in cue options if the player is not running.\n  const filteredCueOptions = cueOptionsObs.pipe(filterOnOther(playerObs, player => !!player && !hasPlayerStarted(player)));\n  // If the video id changed, there's no reason to run 'cue' unless the player\n  // was initialized with a different video id.\n  const changedVideoId = videoIdObs.pipe(filterOnOther(playerObs, (player, videoId) => !!player && player.videoId !== videoId));\n  // If the player changed, there's no reason to run 'cue' unless there are cue options.\n  const changedPlayer = playerObs.pipe(filterOnOther(combineLatest([videoIdObs, cueOptionsObs]), ([videoId, cueOptions], player) => !!player && (videoId != player.videoId || !!cueOptions.startSeconds || !!cueOptions.endSeconds)));\n  merge(changedPlayer, changedVideoId, filteredCueOptions).pipe(withLatestFrom(combineLatest([playerObs, videoIdObs, cueOptionsObs, suggestedQualityObs])), map(([_, values]) => values), takeUntil(destroyed)).subscribe(([player, videoId, cueOptions, suggestedQuality]) => {\n    if (!videoId || !player) {\n      return;\n    }\n    player.videoId = videoId;\n    player.cueVideoById(Object.assign({\n      videoId,\n      suggestedQuality\n    }, cueOptions));\n  });\n}\nfunction hasPlayerStarted(player) {\n  const state = player.getPlayerState();\n  return state !== YT.PlayerState.UNSTARTED && state !== YT.PlayerState.CUED;\n}\nfunction playerIsReady(player) {\n  return 'getPlayerStatus' in player;\n}\n/** Combines the two observables temporarily for the filter function. */\nfunction filterOnOther(otherObs, filterFn) {\n  return pipe(withLatestFrom(otherObs), filter(([value, other]) => filterFn(other, value)), map(([value]) => value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [YouTubePlayer];\nclass YouTubePlayerModule {}\nYouTubePlayerModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: COMPONENTS,\n    exports: COMPONENTS\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YouTubePlayer, YouTubePlayerModule };","map":{"version":3,"names":["Component","ChangeDetectionStrategy","ViewEncapsulation","NgZone","Inject","PLATFORM_ID","Input","Output","ViewChild","NgModule","isPlatformBrowser","Subject","BehaviorSubject","of","combineLatest","pipe","Observable","fromEventPattern","merge","take","startWith","combineLatest$1","skipWhile","map","scan","distinctUntilChanged","tap","mergeMap","takeUntil","publish","switchMap","withLatestFrom","filter","DEFAULT_PLAYER_WIDTH","DEFAULT_PLAYER_HEIGHT","YouTubePlayer","constructor","_ngZone","platformId","_youtubeContainer","_destroyed","_playerChanges","undefined","_videoId","_height","_width","_startSeconds","_endSeconds","_suggestedQuality","_playerVars","ready","_getLazyEmitter","stateChange","error","apiChange","playbackQualityChange","playbackRateChange","_isBrowser","videoId","value","next","height","width","startSeconds","endSeconds","suggestedQuality","playerVars","ngOnInit","iframeApiAvailableObs","window","YT","Player","showBeforeIframeApiLoads","ngDevMode","Error","iframeApiAvailableSubject","_existingApiReadyCallback","onYouTubeIframeAPIReady","run","playerObs","createPlayerObservable","player","waitUntilReady","playerIsReady","destroy","subscribe","_player","_pendingPlayerState","_initializePlayer","bindSizeToPlayer","bindSuggestedQualityToPlayer","bindCueVideoCall","connect","createEventsBoundInZone","ngAfterViewInit","youtubeContainer","nativeElement","ngOnDestroy","complete","playVideo","_getPendingState","playbackState","PlayerState","PLAYING","pauseVideo","PAUSED","stopVideo","CUED","seekTo","seconds","allowSeekAhead","seek","mute","muted","unMute","isMuted","setVolume","volume","getVolume","setPlaybackRate","playbackRate","getPlaybackRate","getAvailablePlaybackRates","getVideoLoadedFraction","getPlayerState","UNSTARTED","getCurrentTime","getPlaybackQuality","getAvailableQualityLevels","getDuration","getVideoUrl","getVideoEmbedCode","state","name","listener","addEventListener","removeEventListener","_a","source","observer","decorators","type","args","selector","changeDetection","OnPush","encapsulation","None","template","ctorParameters","Object","propDecorators","widthObs","heightObs","setSize","suggestedQualityObs","setPlaybackQuality","onAbort","emitter","aborted","resolved","onReady","event","target","videoIdObs","playerVarsObs","ngZone","playerOptions","constructorOptions","sizeOptions","skipUntilRememberLatest","syncPlayerState","notifier","_","doneSkipping","container","videoOptions","newPlayer","runOutsideAngular","startSecondsObs","endSecondsObs","destroyed","cueOptionsObs","filteredCueOptions","filterOnOther","hasPlayerStarted","changedVideoId","changedPlayer","cueOptions","values","cueVideoById","assign","otherObs","filterFn","other","COMPONENTS","YouTubePlayerModule","declarations","exports"],"sources":["C:/ElearningManagementSystem-main/node_modules/@angular/youtube-player/fesm2015/youtube-player.js"],"sourcesContent":["import { Component, ChangeDetectionStrategy, ViewEncapsulation, NgZone, Inject, PLATFORM_ID, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, BehaviorSubject, of, combineLatest, pipe, Observable, fromEventPattern, merge } from 'rxjs';\nimport { take, startWith, combineLatest as combineLatest$1, skipWhile, map, scan, distinctUntilChanged, tap, mergeMap, takeUntil, publish, switchMap, withLatestFrom, filter } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_PLAYER_WIDTH = 640;\nconst DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nclass YouTubePlayer {\n    constructor(_ngZone, platformId) {\n        this._ngZone = _ngZone;\n        this._youtubeContainer = new Subject();\n        this._destroyed = new Subject();\n        this._playerChanges = new BehaviorSubject(undefined);\n        this._videoId = new BehaviorSubject(undefined);\n        this._height = new BehaviorSubject(DEFAULT_PLAYER_HEIGHT);\n        this._width = new BehaviorSubject(DEFAULT_PLAYER_WIDTH);\n        this._startSeconds = new BehaviorSubject(undefined);\n        this._endSeconds = new BehaviorSubject(undefined);\n        this._suggestedQuality = new BehaviorSubject(undefined);\n        this._playerVars = new BehaviorSubject(undefined);\n        /** Outputs are direct proxies from the player itself. */\n        this.ready = this._getLazyEmitter('onReady');\n        this.stateChange = this._getLazyEmitter('onStateChange');\n        this.error = this._getLazyEmitter('onError');\n        this.apiChange = this._getLazyEmitter('onApiChange');\n        this.playbackQualityChange = this._getLazyEmitter('onPlaybackQualityChange');\n        this.playbackRateChange = this._getLazyEmitter('onPlaybackRateChange');\n        this._isBrowser = isPlatformBrowser(platformId);\n    }\n    /** YouTube Video ID to view */\n    get videoId() { return this._videoId.value; }\n    set videoId(videoId) {\n        this._videoId.next(videoId);\n    }\n    /** Height of video player */\n    get height() { return this._height.value; }\n    set height(height) {\n        this._height.next(height || DEFAULT_PLAYER_HEIGHT);\n    }\n    /** Width of video player */\n    get width() { return this._width.value; }\n    set width(width) {\n        this._width.next(width || DEFAULT_PLAYER_WIDTH);\n    }\n    /** The moment when the player is supposed to start playing */\n    set startSeconds(startSeconds) {\n        this._startSeconds.next(startSeconds);\n    }\n    /** The moment when the player is supposed to stop playing */\n    set endSeconds(endSeconds) {\n        this._endSeconds.next(endSeconds);\n    }\n    /** The suggested quality of the player */\n    set suggestedQuality(suggestedQuality) {\n        this._suggestedQuality.next(suggestedQuality);\n    }\n    /**\n     * Extra parameters used to configure the player. See:\n     * https://developers.google.com/youtube/player_parameters.html?playerVersion=HTML5#Parameters\n     */\n    get playerVars() { return this._playerVars.value; }\n    set playerVars(playerVars) {\n        this._playerVars.next(playerVars);\n    }\n    ngOnInit() {\n        // Don't do anything if we're not in a browser environment.\n        if (!this._isBrowser) {\n            return;\n        }\n        let iframeApiAvailableObs = of(true);\n        if (!window.YT || !window.YT.Player) {\n            if (this.showBeforeIframeApiLoads && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw new Error('Namespace YT not found, cannot construct embedded youtube player. ' +\n                    'Please install the YouTube Player API Reference for iframe Embeds: ' +\n                    'https://developers.google.com/youtube/iframe_api_reference');\n            }\n            const iframeApiAvailableSubject = new Subject();\n            this._existingApiReadyCallback = window.onYouTubeIframeAPIReady;\n            window.onYouTubeIframeAPIReady = () => {\n                if (this._existingApiReadyCallback) {\n                    this._existingApiReadyCallback();\n                }\n                this._ngZone.run(() => iframeApiAvailableSubject.next(true));\n            };\n            iframeApiAvailableObs = iframeApiAvailableSubject.pipe(take(1), startWith(false));\n        }\n        // An observable of the currently loaded player.\n        const playerObs = createPlayerObservable(this._youtubeContainer, this._videoId, iframeApiAvailableObs, this._width, this._height, this._playerVars, this._ngZone).pipe(tap(player => {\n            // Emit this before the `waitUntilReady` call so that we can bind to\n            // events that happen as the player is being initialized (e.g. `onReady`).\n            this._playerChanges.next(player);\n        }), waitUntilReady(player => {\n            // Destroy the player if loading was aborted so that we don't end up leaking memory.\n            if (!playerIsReady(player)) {\n                player.destroy();\n            }\n        }), takeUntil(this._destroyed), publish());\n        // Set up side effects to bind inputs to the player.\n        playerObs.subscribe(player => {\n            this._player = player;\n            if (player && this._pendingPlayerState) {\n                this._initializePlayer(player, this._pendingPlayerState);\n            }\n            this._pendingPlayerState = undefined;\n        });\n        bindSizeToPlayer(playerObs, this._width, this._height);\n        bindSuggestedQualityToPlayer(playerObs, this._suggestedQuality);\n        bindCueVideoCall(playerObs, this._videoId, this._startSeconds, this._endSeconds, this._suggestedQuality, this._destroyed);\n        // After all of the subscriptions are set up, connect the observable.\n        playerObs.connect();\n    }\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 11.0.0\n     */\n    createEventsBoundInZone() {\n        return {};\n    }\n    ngAfterViewInit() {\n        this._youtubeContainer.next(this.youtubeContainer.nativeElement);\n    }\n    ngOnDestroy() {\n        if (this._player) {\n            this._player.destroy();\n            window.onYouTubeIframeAPIReady = this._existingApiReadyCallback;\n        }\n        this._playerChanges.complete();\n        this._videoId.complete();\n        this._height.complete();\n        this._width.complete();\n        this._startSeconds.complete();\n        this._endSeconds.complete();\n        this._suggestedQuality.complete();\n        this._youtubeContainer.complete();\n        this._playerVars.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#playVideo */\n    playVideo() {\n        if (this._player) {\n            this._player.playVideo();\n        }\n        else {\n            this._getPendingState().playbackState = YT.PlayerState.PLAYING;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#pauseVideo */\n    pauseVideo() {\n        if (this._player) {\n            this._player.pauseVideo();\n        }\n        else {\n            this._getPendingState().playbackState = YT.PlayerState.PAUSED;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#stopVideo */\n    stopVideo() {\n        if (this._player) {\n            this._player.stopVideo();\n        }\n        else {\n            // It seems like YouTube sets the player to CUED when it's stopped.\n            this._getPendingState().playbackState = YT.PlayerState.CUED;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#seekTo */\n    seekTo(seconds, allowSeekAhead) {\n        if (this._player) {\n            this._player.seekTo(seconds, allowSeekAhead);\n        }\n        else {\n            this._getPendingState().seek = { seconds, allowSeekAhead };\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#mute */\n    mute() {\n        if (this._player) {\n            this._player.mute();\n        }\n        else {\n            this._getPendingState().muted = true;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#unMute */\n    unMute() {\n        if (this._player) {\n            this._player.unMute();\n        }\n        else {\n            this._getPendingState().muted = false;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#isMuted */\n    isMuted() {\n        if (this._player) {\n            return this._player.isMuted();\n        }\n        if (this._pendingPlayerState) {\n            return !!this._pendingPlayerState.muted;\n        }\n        return false;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setVolume */\n    setVolume(volume) {\n        if (this._player) {\n            this._player.setVolume(volume);\n        }\n        else {\n            this._getPendingState().volume = volume;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVolume */\n    getVolume() {\n        if (this._player) {\n            return this._player.getVolume();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.volume != null) {\n            return this._pendingPlayerState.volume;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate */\n    setPlaybackRate(playbackRate) {\n        if (this._player) {\n            return this._player.setPlaybackRate(playbackRate);\n        }\n        else {\n            this._getPendingState().playbackRate = playbackRate;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate */\n    getPlaybackRate() {\n        if (this._player) {\n            return this._player.getPlaybackRate();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackRate != null) {\n            return this._pendingPlayerState.playbackRate;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates */\n    getAvailablePlaybackRates() {\n        return this._player ? this._player.getAvailablePlaybackRates() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction */\n    getVideoLoadedFraction() {\n        return this._player ? this._player.getVideoLoadedFraction() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlayerState */\n    getPlayerState() {\n        if (!this._isBrowser || !window.YT) {\n            return undefined;\n        }\n        if (this._player) {\n            return this._player.getPlayerState();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackState != null) {\n            return this._pendingPlayerState.playbackState;\n        }\n        return YT.PlayerState.UNSTARTED;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime */\n    getCurrentTime() {\n        if (this._player) {\n            return this._player.getCurrentTime();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.seek) {\n            return this._pendingPlayerState.seek.seconds;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality */\n    getPlaybackQuality() {\n        return this._player ? this._player.getPlaybackQuality() : 'default';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels */\n    getAvailableQualityLevels() {\n        return this._player ? this._player.getAvailableQualityLevels() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getDuration */\n    getDuration() {\n        return this._player ? this._player.getDuration() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl */\n    getVideoUrl() {\n        return this._player ? this._player.getVideoUrl() : '';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode */\n    getVideoEmbedCode() {\n        return this._player ? this._player.getVideoEmbedCode() : '';\n    }\n    /** Gets an object that should be used to store the temporary API state. */\n    _getPendingState() {\n        if (!this._pendingPlayerState) {\n            this._pendingPlayerState = {};\n        }\n        return this._pendingPlayerState;\n    }\n    /** Initializes a player from a temporary state. */\n    _initializePlayer(player, state) {\n        const { playbackState, playbackRate, volume, muted, seek } = state;\n        switch (playbackState) {\n            case YT.PlayerState.PLAYING:\n                player.playVideo();\n                break;\n            case YT.PlayerState.PAUSED:\n                player.pauseVideo();\n                break;\n            case YT.PlayerState.CUED:\n                player.stopVideo();\n                break;\n        }\n        if (playbackRate != null) {\n            player.setPlaybackRate(playbackRate);\n        }\n        if (volume != null) {\n            player.setVolume(volume);\n        }\n        if (muted != null) {\n            muted ? player.mute() : player.unMute();\n        }\n        if (seek != null) {\n            player.seekTo(seek.seconds, seek.allowSeekAhead);\n        }\n    }\n    /** Gets an observable that adds an event listener to the player when a user subscribes to it. */\n    _getLazyEmitter(name) {\n        // Start with the stream of players. This way the events will be transferred\n        // over to the new player if it gets swapped out under-the-hood.\n        return this._playerChanges.pipe(\n        // Switch to the bound event. `switchMap` ensures that the old event is removed when the\n        // player is changed. If there's no player, return an observable that never emits.\n        switchMap(player => {\n            return player ? fromEventPattern((listener) => {\n                player.addEventListener(name, listener);\n            }, (listener) => {\n                // The API seems to throw when we try to unbind from a destroyed player and it doesn't\n                // expose whether the player has been destroyed so we have to wrap it in a try/catch to\n                // prevent the entire stream from erroring out.\n                try {\n                    if (player.removeEventListener) {\n                        player.removeEventListener(name, listener);\n                    }\n                }\n                catch (_a) { }\n            }) : of();\n        }), \n        // By default we run all the API interactions outside the zone\n        // so we have to bring the events back in manually when they emit.\n        (source) => new Observable(observer => source.subscribe({\n            next: value => this._ngZone.run(() => observer.next(value)),\n            error: error => observer.error(error),\n            complete: () => observer.complete()\n        })), \n        // Ensures that everything is cleared out on destroy.\n        takeUntil(this._destroyed));\n    }\n}\nYouTubePlayer.decorators = [\n    { type: Component, args: [{\n                selector: 'youtube-player',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                // This div is *replaced* by the YouTube player embed.\n                template: '<div #youtubeContainer></div>'\n            },] }\n];\nYouTubePlayer.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nYouTubePlayer.propDecorators = {\n    videoId: [{ type: Input }],\n    height: [{ type: Input }],\n    width: [{ type: Input }],\n    startSeconds: [{ type: Input }],\n    endSeconds: [{ type: Input }],\n    suggestedQuality: [{ type: Input }],\n    playerVars: [{ type: Input }],\n    showBeforeIframeApiLoads: [{ type: Input }],\n    ready: [{ type: Output }],\n    stateChange: [{ type: Output }],\n    error: [{ type: Output }],\n    apiChange: [{ type: Output }],\n    playbackQualityChange: [{ type: Output }],\n    playbackRateChange: [{ type: Output }],\n    youtubeContainer: [{ type: ViewChild, args: ['youtubeContainer',] }]\n};\n/** Listens to changes to the given width and height and sets it on the player. */\nfunction bindSizeToPlayer(playerObs, widthObs, heightObs) {\n    return combineLatest([playerObs, widthObs, heightObs])\n        .subscribe(([player, width, height]) => player && player.setSize(width, height));\n}\n/** Listens to changes from the suggested quality and sets it on the given player. */\nfunction bindSuggestedQualityToPlayer(playerObs, suggestedQualityObs) {\n    return combineLatest([\n        playerObs,\n        suggestedQualityObs\n    ]).subscribe(([player, suggestedQuality]) => player && suggestedQuality && player.setPlaybackQuality(suggestedQuality));\n}\n/**\n * Returns an observable that emits the loaded player once it's ready. Certain properties/methods\n * won't be available until the iframe finishes loading.\n * @param onAbort Callback function that will be invoked if the player loading was aborted before\n * it was able to complete. Can be used to clean up any loose references.\n */\nfunction waitUntilReady(onAbort) {\n    return mergeMap(player => {\n        if (!player) {\n            return of(undefined);\n        }\n        if (playerIsReady(player)) {\n            return of(player);\n        }\n        // Since removeEventListener is not on Player when it's initialized, we can't use fromEvent.\n        // The player is not initialized fully until the ready is called.\n        return new Observable(emitter => {\n            let aborted = false;\n            let resolved = false;\n            const onReady = (event) => {\n                resolved = true;\n                if (!aborted) {\n                    event.target.removeEventListener('onReady', onReady);\n                    emitter.next(event.target);\n                }\n            };\n            player.addEventListener('onReady', onReady);\n            return () => {\n                aborted = true;\n                if (!resolved) {\n                    onAbort(player);\n                }\n            };\n        }).pipe(take(1), startWith(undefined));\n    });\n}\n/** Create an observable for the player based on the given options. */\nfunction createPlayerObservable(youtubeContainer, videoIdObs, iframeApiAvailableObs, widthObs, heightObs, playerVarsObs, ngZone) {\n    const playerOptions = combineLatest([videoIdObs, playerVarsObs]).pipe(withLatestFrom(combineLatest([widthObs, heightObs])), map(([constructorOptions, sizeOptions]) => {\n        const [videoId, playerVars] = constructorOptions;\n        const [width, height] = sizeOptions;\n        return videoId ? ({ videoId, playerVars, width, height }) : undefined;\n    }));\n    return combineLatest([youtubeContainer, playerOptions, of(ngZone)])\n        .pipe(skipUntilRememberLatest(iframeApiAvailableObs), scan(syncPlayerState, undefined), distinctUntilChanged());\n}\n/** Skips the given observable until the other observable emits true, then emit the latest. */\nfunction skipUntilRememberLatest(notifier) {\n    return pipe(combineLatest$1(notifier), skipWhile(([_, doneSkipping]) => !doneSkipping), map(([value]) => value));\n}\n/** Destroy the player if there are no options, or create the player if there are options. */\nfunction syncPlayerState(player, [container, videoOptions, ngZone]) {\n    if (player && videoOptions && player.playerVars !== videoOptions.playerVars) {\n        // The player needs to be recreated if the playerVars are different.\n        player.destroy();\n    }\n    else if (!videoOptions) {\n        if (player) {\n            // Destroy the player if the videoId was removed.\n            player.destroy();\n        }\n        return;\n    }\n    else if (player) {\n        return player;\n    }\n    // Important! We need to create the Player object outside of the `NgZone`, because it kicks\n    // off a 250ms setInterval which will continually trigger change detection if we don't.\n    const newPlayer = ngZone.runOutsideAngular(() => new YT.Player(container, videoOptions));\n    newPlayer.videoId = videoOptions.videoId;\n    newPlayer.playerVars = videoOptions.playerVars;\n    return newPlayer;\n}\n/**\n * Call cueVideoById if the videoId changes, or when start or end seconds change. cueVideoById will\n * change the loaded video id to the given videoId, and set the start and end times to the given\n * start/end seconds.\n */\nfunction bindCueVideoCall(playerObs, videoIdObs, startSecondsObs, endSecondsObs, suggestedQualityObs, destroyed) {\n    const cueOptionsObs = combineLatest([startSecondsObs, endSecondsObs])\n        .pipe(map(([startSeconds, endSeconds]) => ({ startSeconds, endSeconds })));\n    // Only respond to changes in cue options if the player is not running.\n    const filteredCueOptions = cueOptionsObs\n        .pipe(filterOnOther(playerObs, player => !!player && !hasPlayerStarted(player)));\n    // If the video id changed, there's no reason to run 'cue' unless the player\n    // was initialized with a different video id.\n    const changedVideoId = videoIdObs\n        .pipe(filterOnOther(playerObs, (player, videoId) => !!player && player.videoId !== videoId));\n    // If the player changed, there's no reason to run 'cue' unless there are cue options.\n    const changedPlayer = playerObs.pipe(filterOnOther(combineLatest([videoIdObs, cueOptionsObs]), ([videoId, cueOptions], player) => !!player &&\n        (videoId != player.videoId || !!cueOptions.startSeconds || !!cueOptions.endSeconds)));\n    merge(changedPlayer, changedVideoId, filteredCueOptions)\n        .pipe(withLatestFrom(combineLatest([playerObs, videoIdObs, cueOptionsObs, suggestedQualityObs])), map(([_, values]) => values), takeUntil(destroyed))\n        .subscribe(([player, videoId, cueOptions, suggestedQuality]) => {\n        if (!videoId || !player) {\n            return;\n        }\n        player.videoId = videoId;\n        player.cueVideoById(Object.assign({ videoId,\n            suggestedQuality }, cueOptions));\n    });\n}\nfunction hasPlayerStarted(player) {\n    const state = player.getPlayerState();\n    return state !== YT.PlayerState.UNSTARTED && state !== YT.PlayerState.CUED;\n}\nfunction playerIsReady(player) {\n    return 'getPlayerStatus' in player;\n}\n/** Combines the two observables temporarily for the filter function. */\nfunction filterOnOther(otherObs, filterFn) {\n    return pipe(withLatestFrom(otherObs), filter(([value, other]) => filterFn(other, value)), map(([value]) => value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [YouTubePlayer];\nclass YouTubePlayerModule {\n}\nYouTubePlayerModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: COMPONENTS,\n                exports: COMPONENTS,\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YouTubePlayer, YouTubePlayerModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}