{"ast":null,"code":"var _class;\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst NAV_URL = environment.apiURL;\nexport class ProfessorService {\n  constructor(_http) {\n    this._http = _http;\n  }\n  acceptRequestForProfessorApproval(curremail) {\n    return this._http.get(`${NAV_URL}/acceptstatus/` + curremail);\n  }\n  rejectRequestForProfessorApproval(curremail) {\n    return this._http.get(`${NAV_URL}/rejectstatus/` + curremail);\n  }\n  getProfessorList() {\n    return this._http.get(`${NAV_URL}/professorlist`);\n  }\n  getYoutubeCourseList() {\n    return this._http.get(`${NAV_URL}/youtubecourselist`);\n  }\n  getWebsiteCourseList() {\n    return this._http.get(`${NAV_URL}/websitecourselist`);\n  }\n  getCourseListByName(coursename) {\n    return this._http.get(`${NAV_URL}/courselistbyname/` + coursename);\n  }\n  addCourse(course) {\n    return this._http.post(`${NAV_URL}/addCourse`, course);\n  }\n  getProfessorListByEmail(email) {\n    return this._http.get(`${NAV_URL}/professorlistbyemail/` + email);\n  }\n  addNewChapters(chapter) {\n    return this._http.post(`${NAV_URL}/addnewchapter`, chapter);\n  }\n  getProfileDetails(loggedUser) {\n    return this._http.get(`${NAV_URL}/professorprofileDetails/` + loggedUser);\n  }\n  UpdateUserProfile(professor) {\n    return this._http.put(`${NAV_URL}/updateprofessor`, professor);\n  }\n  getCourseListNames() {\n    return this._http.get(`${NAV_URL}/getcoursenames/`);\n  }\n}\n_class = ProfessorService;\n_class.ɵfac = function ProfessorService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","NAV_URL","apiURL","ProfessorService","constructor","_http","acceptRequestForProfessorApproval","curremail","get","rejectRequestForProfessorApproval","getProfessorList","getYoutubeCourseList","getWebsiteCourseList","getCourseListByName","coursename","addCourse","course","post","getProfessorListByEmail","email","addNewChapters","chapter","getProfileDetails","loggedUser","UpdateUserProfile","professor","put","getCourseListNames","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\ElearningManagementSystem-main\\src\\app\\services\\professor.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Chapter } from '../models/chapter';\nimport { Course } from '../models/course';\n\nconst NAV_URL = environment.apiURL;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfessorService \n{\n  constructor(private _http : HttpClient) { }\n\n  acceptRequestForProfessorApproval(curremail: string): Observable<any>\n  {\n    return this._http.get<any>(`${NAV_URL}/acceptstatus/`+curremail);\n  }\n  \n  rejectRequestForProfessorApproval(curremail: string): Observable<any> \n  {\n    return this._http.get<any>(`${NAV_URL}/rejectstatus/`+curremail);\n  }\n  \n  getProfessorList() : Observable<any>\n  {\n    return this._http.get<any>(`${NAV_URL}/professorlist`);\n  }\n\n  getYoutubeCourseList() : Observable<any>\n  {\n    return this._http.get<any>(`${NAV_URL}/youtubecourselist`);\n  }\n\n  getWebsiteCourseList() : Observable<any>\n  {\n    return this._http.get<any>(`${NAV_URL}/websitecourselist`);\n  }\n\n  getCourseListByName(coursename : string) : Observable<any>\n  {\n    return this._http.get<any>(`${NAV_URL}/courselistbyname/`+coursename);\n  }\n\n  addCourse(course : Course) : Observable<any>\n  {\n    return this._http.post<any>(`${NAV_URL}/addCourse`,course);\n  }\n\n  getProfessorListByEmail(email : string) : Observable<any>\n  {\n    return this._http.get<any>(`${NAV_URL}/professorlistbyemail/`+email);\n  }\n\n  addNewChapters(chapter : Chapter) : Observable<any>\n  {\n    return this._http.post<any>(`${NAV_URL}/addnewchapter`,chapter);\n  }\n\n  getProfileDetails(loggedUser : string) : Observable<any>\n  {\n    return this._http.get(`${NAV_URL}/professorprofileDetails/`+loggedUser);\n  }\n  \n  UpdateUserProfile(professor : any):Observable<any>\n  {\n    return this._http.put<any>(`${NAV_URL}/updateprofessor`,professor);\n  }\n  \n  getCourseListNames() : Observable<any>\n  {\n    return this._http.get(`${NAV_URL}/getcoursenames/`);\n  }\n  \n}\n"],"mappings":";AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;AAI1D,MAAMC,OAAO,GAAGD,WAAW,CAACE,MAAM;AAKlC,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,KAAkB;IAAlB,KAAAA,KAAK,GAALA,KAAK;EAAiB;EAE1CC,iCAAiCA,CAACC,SAAiB;IAEjD,OAAO,IAAI,CAACF,KAAK,CAACG,GAAG,CAAM,GAAGP,OAAO,gBAAgB,GAACM,SAAS,CAAC;EAClE;EAEAE,iCAAiCA,CAACF,SAAiB;IAEjD,OAAO,IAAI,CAACF,KAAK,CAACG,GAAG,CAAM,GAAGP,OAAO,gBAAgB,GAACM,SAAS,CAAC;EAClE;EAEAG,gBAAgBA,CAAA;IAEd,OAAO,IAAI,CAACL,KAAK,CAACG,GAAG,CAAM,GAAGP,OAAO,gBAAgB,CAAC;EACxD;EAEAU,oBAAoBA,CAAA;IAElB,OAAO,IAAI,CAACN,KAAK,CAACG,GAAG,CAAM,GAAGP,OAAO,oBAAoB,CAAC;EAC5D;EAEAW,oBAAoBA,CAAA;IAElB,OAAO,IAAI,CAACP,KAAK,CAACG,GAAG,CAAM,GAAGP,OAAO,oBAAoB,CAAC;EAC5D;EAEAY,mBAAmBA,CAACC,UAAmB;IAErC,OAAO,IAAI,CAACT,KAAK,CAACG,GAAG,CAAM,GAAGP,OAAO,oBAAoB,GAACa,UAAU,CAAC;EACvE;EAEAC,SAASA,CAACC,MAAe;IAEvB,OAAO,IAAI,CAACX,KAAK,CAACY,IAAI,CAAM,GAAGhB,OAAO,YAAY,EAACe,MAAM,CAAC;EAC5D;EAEAE,uBAAuBA,CAACC,KAAc;IAEpC,OAAO,IAAI,CAACd,KAAK,CAACG,GAAG,CAAM,GAAGP,OAAO,wBAAwB,GAACkB,KAAK,CAAC;EACtE;EAEAC,cAAcA,CAACC,OAAiB;IAE9B,OAAO,IAAI,CAAChB,KAAK,CAACY,IAAI,CAAM,GAAGhB,OAAO,gBAAgB,EAACoB,OAAO,CAAC;EACjE;EAEAC,iBAAiBA,CAACC,UAAmB;IAEnC,OAAO,IAAI,CAAClB,KAAK,CAACG,GAAG,CAAC,GAAGP,OAAO,2BAA2B,GAACsB,UAAU,CAAC;EACzE;EAEAC,iBAAiBA,CAACC,SAAe;IAE/B,OAAO,IAAI,CAACpB,KAAK,CAACqB,GAAG,CAAM,GAAGzB,OAAO,kBAAkB,EAACwB,SAAS,CAAC;EACpE;EAEAE,kBAAkBA,CAAA;IAEhB,OAAO,IAAI,CAACtB,KAAK,CAACG,GAAG,CAAC,GAAGP,OAAO,kBAAkB,CAAC;EACrD;;SA9DWE,gBAAgB;;mBAAhBA,MAAgB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAhB5B,MAAgB;EAAA6B,OAAA,EAAhB7B,MAAgB,CAAA8B,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}